---
import type { CollectionEntry } from "astro:content";
import FormattedDate from "../components/FormattedDate.astro";
import { Image, getImage } from "astro:assets";
import BaseLayout from "./BaseLayout.astro";
import { POST_WIDTH } from "../consts";

type Props = CollectionEntry<"blog">["data"];

const { title, description, pubDate, updatedDate, heroImage } = Astro.props;
const ogImage = await getImage({ src: heroImage, format: "jpg", width: 250 });
---

<BaseLayout
  title={title}
  description={description}
  current="/blog"
  ogImage={ogImage}
>
  <main>
    <div class="row">
      <a class="index-button" href="/blog">Back to index</a>
      <article>
        <div class="hero-image">
          <Image src={heroImage} alt={title} width={POST_WIDTH} height={510} />
        </div>
        <div class="prose">
          <div class="title">
            <div class="date">
              <FormattedDate date={pubDate} />
              {
                updatedDate && (
                  <span class="last-updated-on">
                    updated on <FormattedDate date={updatedDate} />
                  </span>
                )
              }
            </div>
            <h1>{title}</h1>
            <hr />
          </div>
          <slot />
        </div>
      </article>
      <a class="index-button" href="/blog">Back to index</a>
    </div>
  </main>
</BaseLayout>

<style define:vars={{ postWidth: POST_WIDTH }}>
  main {
    background-color: white;
    padding-top: calc(4 * var(--space));
    padding-bottom: var(--vspace-4);
  }
  .row {
    width: 92%;
    max-width: calc(var(--postWidth) * 1px);
    margin: 0 auto;
    display: -ms-flexbox;
    display: -webkit-box;
    display: flex;
    -ms-flex-flow: row wrap;
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    flex-flow: row wrap;
  }
  .hero-image {
    width: 100%;
  }
  .hero-image img {
    display: block;
    margin: 0 auto;
    border-radius: 12px;
    box-shadow: var(--box-shadow);
  }
  .prose {
    max-width: calc(100% - 2em);
    margin: auto;
    padding: 1em;
    color: rgb(var(--gray-dark));
  }
  .title {
    margin-bottom: 1em;
    padding: 1em 0;
    text-align: center;
    line-height: 1;
  }
  .title h1 {
    margin: 0 0 0.5em 0;
  }
  .date {
    margin-bottom: 0.5em;
    color: rgb(var(--gray));
  }
  .last-updated-on {
    font-style: italic;
  }
  .index-button {
    max-width: calc(100% - 2em);
    padding: 1em;
    margin-bottom: 4rem;
  }
  @media screen and (max-width: 800px) {
    main {
      padding-top: var(--vspace-4);
    }
    .row {
      width: 90%;
    }
  }

  @media screen and (max-width: 600px) {
    main {
      padding-left: 2vw;
      padding-right: 2vw;
    }
    .row {
      width: 100%;
      padding-left: 0vw;
      padding-right: 0vw;
    }
    .prose {
      padding: 0em;
    }
  }
</style>
